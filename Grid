public class Grid {

	//attribut Grid, tableau de caract�res
	private char [] grid;
	
	//constructeur (appel� dans la fonction main pour cr�er objet)
	public Grid() {
		grid = new char[9]; //cr�ation du tableau avec la taille
		for(int i = 0; i<grid.length; i++) { //remplissage du tableau
			grid[i] = '.';
		}		
	}
	
	//constructeur par copie
	public Grid(Grid g) {
		grid = new char[9]; //cr�ation du tableau avec la taille
		for (int i =0; i<9; i++) {
			grid[i] = g.getGrid()[i]; //copie des valeurs du tableau
		}
	}
	
	//obtenir l'attribut grid dans une autre classe
	public char[] getGrid() {
		return grid;
	}
	
	//modifier l'attribut grid dans une autre classe
	public void setGrid(char[] g) {
		grid = g;
	}
	
	//fonction d'affichage de la grille
	public void printGrid() {
		System.out.println("   1|2|3");
		System.out.println("1 [" + grid[0] + "|" + grid[1] + "|" + grid[2] + "]");
		System.out.println("2 [" + grid[3] + "|" + grid[4] + "|" + grid[5] + "]");
		System.out.println("3 [" + grid[6] + "|" + grid[7] + "|" + grid[8] + "]");
	}
	
	//fonction donnant le num�ro de la case du tableau correspondant aux coordonn�es entr�es par le joueur
	private int findCase(int x, int y) {
		return y-1+3*(x-1);
	}
	
	//fonction qui place un X ou un O selon le choix du joueur
	public boolean placeToken(int x, int y, char token) {
		if(x<=3 && y<=3 && x>0 && y>0) { //v�rification si les valeurs seront retrouv�es dans le tableau
			int numberCase = findCase(x, y); //variable du num�ro de la case
			if(grid[numberCase] == '.') { //v�rification si la case est vide avant de placer le token
				grid[numberCase] = token;
				return true;
			} else {
				System.out.println("La case demand�e est d�j� pleine");
				return false;
			}
		} else {
			System.out.println("Les valeurs demand�es ne sont pas correctes");
			return false;
		}
	}
	
	public boolean placeTokenIA(int numberCase, char token) {
	
		if(grid[numberCase] == '.') { //v�rification si la case est vide avant de placer le token
			grid[numberCase] = token;
			return true;
		} else {
			return false;
		}
	}
	
	//v�rifier s'il y a un gagnant
	public char checkWinner() {
		if(grid[0] == grid[1] && grid[1] == grid[2] && grid[2] != '.') {
			return grid[0];
		}
		if(grid[3] == grid[4] && grid[4] == grid[5] && grid[5] != '.') {
			return grid[4];
		}
		if(grid[6] == grid[7] && grid[7] == grid[8] && grid[8] != '.') {
			return grid[6];
		}
		if(grid[0] == grid[4] && grid[4] == grid[8] && grid[8] != '.') {
			return grid[4];
		}
		if(grid[2] == grid[4] && grid[4] == grid[6] && grid[6] != '.') {
			return grid[4];
		}
		if(grid[0] == grid[3] && grid[3] == grid[6] && grid[6] != '.') {
			return grid[3];
		}
		if(grid[1] == grid[4] && grid[4] == grid[7] && grid[7] != '.') {
			return grid[4];
		}
		if(grid[2] == grid[5] && grid[5] == grid[8] && grid[8] != '.') {
			return grid[2];
		}
		return '.'; //si aucune des conditions ci-dessus n'est respect�e
	}			
		
		
	//v�rifier quel joueur est le vainqueur
	public void printWinner() {
		if(checkWinner() == 'X') {
			System.out.println("Le joueur 1 gagne");
		}
		if(checkWinner() == 'O') {
			System.out.println("Le joueur 2 gagne");
		}
	}
	
	public void printWinnerIA() {
		if(checkWinner() == 'X') {
			System.out.println("Vous gagnez");
		}
		if(checkWinner() == 'O') {
			System.out.println("L'IA gagne");
		}
	}
	
	
	//v�rifier si il y a match nul
	public boolean tieGame() {
		if(grid[0] != '.' && grid[1] != '.' && grid[2] != '.' && 
		   grid[3] != '.' && grid[4] != '.' && grid[5] != '.' && 
		   grid[6] != '.' && grid[7] != '.' && grid[8] != '.') {
			return true;
			} else {
				return false;
			}
	}
	
	public void printTieGame() {
		if(tieGame() == true && checkWinner() == '.') {
			System.out.println("Match nul");
		}
	}
	}
